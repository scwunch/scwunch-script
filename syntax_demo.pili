print 'start'

my_func[]:
    print "it worked!"

my_func[any arg]:
    print arg

map my_func
    []:
        print "it worked"
    [any arg]:
        print arg

my_func[]
my_func['so did this one!']

my_func[MyList ls]:  # note: you can define an option with a pattern matching a class that has yet to be defined
    return ls.str


# example of a custom list class with a "hidden" map `items` to store data for some privacy
class MyList
	var items = {}
	getter items Map =
	    return tuple[items[self]]

	[seq ls]:
		rec = MyList.new
		items[rec] = list[ls]
		return rec

	[]:
	    return MyList[[]]

	opt [int index]:
		return items[self][index]

    .push[any element]:
		items[self].push[element]

    push[MyList self, any element]:
        items[self].push[element]

    .str:
        return self.items.join[', ']

    str[MyList self]:
        return self.items.join[', ']

push[MyList self, any element]:
    MyList.items[self].push[element]

myls = MyList[]
myls.push[3]
print myls.str
print my_func[myls]




# basic values are numbers and strings
print "string literals can use double quotes"
print 'or single quotes'
print `or backticks`
print ''

# escape characters are recognized in single or double quoted strings, but in backtick strings are interpreted literally
print "escape characters like \t(tab) and \n(newline) are recognized in"
print 'both \'single quote\' and "double quote" strings'
print `backquote strings have no escape characters; "\n" just becomes "\n"`
print ``double-backticked strings can have `backticks` inside them``
print ''

print `string interpolation using {expression} also works`
print '1 + 2 = {1 + 2}'
CAN = 'can'
print 'Can you nest string interpolation? {'Yes, you {CAN}' if 1 == 1 else 'nope'}'
print ''
print 'next is "settings.base = \'h\'"   now we\'re working in base 6 (heximal)'
settings.base = 'h'
# pili fluidly and automatically converts between booleans, integers, and rational numbers,
# depending on what operators are applied to them
# floats only appear if a function explicitly returns a float (like the float map) or float literals
my_bool = 'two' == 'two'
my_int = my_bool * 10
my_ratio = my_int / 4
print '10/4 = {my_ratio} (type: {type[my_ratio]})'
print "10/4 * 2 = {my_ratio*2} (type: {type[my_ratio*2]})"
my_float = 0.55400f
print my_float

# by the way, all numbers in pili used to be heximal (base-six).  To input decimal numbers, use a 'd' suffix.
# To output decimal numbers, convert using the string function
print '9d = {9d}'
print 'str[20, 10d] = {str[20, 10d]}'
print ''

# the default base is stored in the pili.settings module
print "current base: " + settings.base
print "the base is a letter representing (from binary to decimal): 'btqphsond'"
# ... but then it was decided that heximal was too wierd, and so we switched back to decimal
# set the default base like this:
settings.base = 'd'
print "Just changed the base back to decimal.  See?  5 + 4 = {5+4}"
print ''

variable_that_might_be_empty ??= "first value"
variable_that_might_be_empty ??= "second value"
print variable_that_might_be_empty
variable_that_might_be_empty = blank
variable_that_might_be_empty ??= "third value"
print variable_that_might_be_empty
print "^ should be first value then third value\n"

# How do you define function?
greeting[str name]:
    return 'Hello ' + name

# the function must have an identifier (usually a simple name like 'greeting')
# the function must have a set of 0 or more parameters
# each parameter has a pattern and (optionally) a name to bind to when matched.
# in this case, the pattern is the prototype 'str' and the name is 'name'
# this function happens to only need one line — it could be written like this:
greeting[str name]:
    return 'Hello ' + name

print greeting["Ryan"]

# of course, functions may have multiple options — that's kinda Pili's thing.  They can be added simply by redefining the function again with different parameters

greeting[str name, int times]:
    return 'Hi {name}! ' * times

# the actual code that runs depends on the arguments passed to the function — the match is automatically detected

print "greeting['Bob'] -> " + greeting['Bob']
print "greeting['Bob', 3] -> " + greeting['Bob', 3]


# patterns can get pretty sophisticated if you need them to.  And parameters can have quantifers like regex
greeting[str name, int<0 times]:
    return "Goodbye {name}. " * -times

greeting[str names+]:
    greets = []
    for name in names
        push[greets, 'Hi {name}']
        # greets.push['Hi {name}']
    if not has 'times'
        times = 1
    return greets.join[', '] * times

print "greeting['Fred', -2] -> " + greeting['Fred', -2] + "ERROR"
print "greeting['Larry', 'Matilda'] -> " + greeting['Larry', 'Matilda']
print ''

# You just saw the "has" operator above; it checks for the existence of an option (by name or pattern or by list of arguments)

print 'greeting has ["any random name"] -> {greeting has ["any random name", 444]}'
print 'greeting has "name" -> {greeting has "name"}'
print 'greeting has "Ryan" -> {greeting has "Ryan"}'
print 'has "greeting" ->  {has "greeting"}'
print ''

# How does this matching work?  There are three main classes of patterns:
# 1. value patterns
# 2. prototype patterns
# 3. union patterns
# value patterns are created when you use the = operator to assign a value to a value pattern.  Eg
print "Value Patterns"

greeting[1] ??= "One"
greeting["one"] = 1
greeting[1] ??= "this value won't be assigned"
print 'greeting[1] => ' + greeting[1]
print 'greeting["one"] => {greeting["one"]}'
# notice how that second pattern *overrides* the very first pattern [str name] that we put on greeting.  Value patterns generally take precedence over prototype patterns
print "value patterns are mostly just used as keys in dictionary-like options; they either match a value or they don't — not that exciting so let's move on to prototype patterns."
print ''
print "Type Patterns"
# patterns are interpreted from values when used as parameters, like [str name] above
# matching is also used by the MATCH is operator
print '-33 is int => {-33 is int}'
print '0.43f is float and 0.43 is num and -33 is num => {0.43f is float and 0.43 is num and -33 is num}'
print '0.43 is str => {0.43 is str}'
print '0.43 is not str => {0.43 is not str}'
# union patterns match if any of the sub-patterns match
print "'hello' is num|str => {'hello' is num|str}"
neg_float_or_pos_int = float < 0 | int > 0

print "Indexing and slicing..."
ls = (1, 2, 3, 4, 5)
print ls[1]
print ls[2]
print ls[3]
print ls[4]
print ls[-1]
print 'two-index slices'
print '0 is not a valid index, but in slices it represents the beginning or end of a sequence'
print ls[0 to 1]
print ls[1 to 0]
print ls[2 to -2]
print ls[5 to ]
print ls[-2 to]
print "three-index slices"
print ls[1 to 0 by 1]
print ls[0 to 0 by 2]
print ls[1 to 0 by 2]
print ls[4 to 1 by -1]
print ls[0 to 0 by -1]

print "for n in [-1, 0 , 1, -0.3, 0.0, 0.3]"
for n in [-1, 0 , 1, -0.3, 0.0, 0.3]
    print "{' ' * (10-len[n.str])}{n} is float < 0 | int > 0 => {n is neg_float_or_pos_int}"
print "THIS NEEDS DEBUGGING!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
print "5 is float | int > 4 => {5 is float | int > 4}"
print "-0.3 is float | int > 4 => {-0.3 is float | int > 4}"
# these are just some built-in types.  We can create our own too
print 5 is float | int > 4
print 5 is int > 4 | float


# Some funky operators
print "The `has` and `is` operators are just some of the funky operators in Pili."
print "There is also `??`, `.?`, and `..`."
print "some_null_value = blank; some_null_value ?? 0 ?? 1 => {some_null_value = blank; some_null_value ?? 0 ?? 1}"
print greeting['one']
print greeting.?name ?? greeting.?nlljlasd ?? greeting?[2451] ?? 'none of those optinos were found\n'

# the swizzle operator `..` is fun.  It acts like a dot operator distributed over every element of an iterable
print "my_list = {my_list = [-1, -2, 0 ,1 ,2, ]}"
print "my_list..abs => {my_list..abs}"


# Classs
# class Animal
#     species <str> = "human"
#     alive <bool> = True
#     _slices
#     slices <set[Slice]>:
#         filters = self.get_filter_slices
#         return filters + self._slices
#     [str species?] -> Animal:
#         return Animal[species]
#     .len:
#         return len[slices]
#
#
# slice Dog of Animal
#     species <"dog"> = "dog"
#     .bark:
#         print "bowowow"




print "\n\n**************************"
# There are no classes in Pili, just prototypes.  Objects are called "Functions" and each function also acts as a prototype.
# When a function lacks a return statement, it will return an "instance" of itself.
# A newly created function has as it's prototype the function that was used to create it.
# A function literal value has no prototype
# There are two ways to create class-like inheritance


# Animal =
#     []:
#         blank
#     species = blank
#     alive = "I'm alive."
#     "make_sound" : print self.sound
#     print_sound[]:
#         print self.sound
#
# a = Animal[]
# # print a.species
# print a.type
#
# Dog =
#     inherit Animal
#     []:
#         none
#     bark: print "Bark!"
#     sound = 'bark sound!'
#     species = 'canis lupus'
#
# d = Dog[]
# print d.species
# print d.alive
# d.make_sound
# # d.print_sound[],,
# print d.type
# print d.type.type
#
#
# print "\n\n************************************"
# Factory =
#     []:
#         Factory.factory_count += 1
#         Animal[str species]:
#             []:
#                 Factory.species_count += 1
#             alive = "I'm alive."
#             greet:
#                 return "Hi, I'm a {self.species}"
#     factory_count = 0
#     species_count = 0
#
# f = Factory[]
# print Factory.factory_count
# print f.factory_count
# off = f[]
# print type[off]




print "Some funky operators include:  .., ??, is, "
print "next: demo classes/prototyping and dot-options"
print "aliases... := ..."
print "Pili also does closures similarly to python"
# but not exactly the same; if a variable is undefined at runtime, it will be excluded from the closure
x = "global x"
closure_demo[]:
    z = "outer z"
    donky[]:
        inner[any y]:
            return x, y, z

        if USE_DONKY_Z
            z = "donky z"
        return inner

    chonky[]:
        x = "chonky x"
        f = donky[]
        return f

    f = chonky[]
    return f["y arg"]

USE_DONKY_Z = true
print closure_demo[]


print "\n\n************************************************"
# the exit command is not necessary, but without it, the script will return the running function, which is awkwardly printed as root.main

trait Animal
    slot species str?
    slot alive bool = true
    slot sound str = ""
    getter make_sound blank =
        print self.sound


class Dog (Animal)
    slot name str = ""
    slot length num
    slot array list =
        return []

    getter bark str =
        return "Helo, my name is {self.name}!"

    getter print_bark blank =
        print self.bark

    opt [int n]:
        return self.array[n]

    opt [int i, int j]:
        return self.array[i, j]

    [str name, int length, list array]:
        return Dog.new[name, length, array, 'Dog', true, 'bark']

    # .str[]:
    #     return "Dog[{self.name}, {self.length}, {self.array}]"

    str[Dog self]:
        return "Dog[{self.name}, {self.length}, {self.array}]"

    # .bool[]:
    #     return

    bool[Dog self]:
        return true

    add[Dog self, Dog other]:
        return Dog[self.name + other.name, self.length + other.length, self.array + other.array]

#     .'+'[]:
#         return
#
#     Op['+'][Dog d1, Dog d2]:
#         return
#
#     .Op['+'][any other]:
#         return
#
#     .add[any other]:
#         return
#
#     .'.'[]:
#         return

    # .module.add[]:
    #     return
    #
    # module.add[Dog d1, Dog d2]:
    #     return


rover = Dog['Rover', 137, [1,2,3]]
boulder = Dog['Boulder', 232, ['a', 'b', 'c'], 'Big Dog', sound='BARK']
print "rover = Dog['Rover', 137, [1,2,3]]... {rover}"
print "rover.name: {rover.name}"
print "rover.length: {rover.length}"
print "rover.array: {rover.array}"
print "rover.species: {rover.species}"
print "rover.alive: {rover.alive}"
print "rover.sound: {rover.sound}"
print "rover[-1]: {rover[-1]}"
print "rover.make_sound..."
rover.make_sound
print `boulder = Dog['Boulder', 232, ['a', 'b', 'c'], 'Big Dog', sound='BARK']`
print "name: {boulder.name}"
print "length: {boulder.length}"
print "array: {boulder.array}"
print "species: {boulder.species}"
print "Boulder's Sound: "+  boulder.sound
boulder.make_sound
print "OY"
other = Dog[name='Boulder', 232, sound='B-b-b bark BaRk!']  #, !big]
print "OY"
print 'other sound is ' + other.sound
other.make_sound

# fn sum[num a+, DogType]


trait Details
    getter description str =
        return "{self.title}, released in {self.release_year}, is a {self.genre} movie directed by {self.director}."
    getter years_since_release int =
        return 2020 - self.release_year

class Movie (Details)
    local_var = []

    slot title str = ""
    slot director str = ""
    slot release_year int>0
    slot genre str
    setter description[any val]:
        self.genre = str[val]

    [str title, str director, int release_year, str genre]:
        return Movie.new[title, director, release_year, genre]

    opt [num n]:
        return local_var[n]

    # .str:
    #     return self.description

    str[Movie self]:
        return self.description



class TokenType
    slot name str
    [str t]:
        return TokenType.new[t]

class TokenTypeEnum
    slot Unkown TokenType = TokenType['?']
    slot Operator TokenType = TokenType['op']

TokenType = TokenTypeEnum[]

# Node[!argset, 2,3,4]

# trait Node
#     slot pos tuple(int, int) = (-1, -1)
#     slot type TokenType = TokenType.Unknown








# ls`['3 .. 1', -1]






















```
    Matchers are the basic elements that will match a single value or not.
    They can be combined in the following ways to make patterns:
    - concatenation [a, b, c]
    - alternation [a | b | c]
    - intersection [Cat(name: "Whiskers"), a & b & c]
    - quantification [a+, b*, c?]
    - binding [int n, str text+]
    - default [int n = 0] (requires binding?)

    intersection of parameters?
    - foo[(int*, float*, int*)&(num+)]
    - not implemented yet

    Okay, but concatenation and quantification are special operations that only take place in certain contexts — most notably ArgsMatcher.

    So a Parameter could be...
    - alternation | intersection
    - with binding & quantifier & default

    And then ArgsMatcher will take Parameters and have its own VM do the concatenation.

    In fact... ArgsMatcher is the only one (and SequenceMatcher) that needs a VM!

    So, Pattern could be an abstract class parenting Matcher and Parameter.
    And Parameter could parent Union and Intersection
    ... not necessary; the Parameter should just store the original pattern along with other properties.
    ... then an ArgsMather should be built from properties, storing a tuple of Parameters as well as constructing the VM

    class Pattern:
        vm: VM

    class Matcher(Pattern):
        vm = property(make_vm)
        ...

    class Parameter(Pattern):
        pattern: Pattern
        binding: str
        quantifier: str
        default: Record
        vm = property(make_vm)


    No no no... I think I need to go back to the same layout as before, but then just let the ArgsMather build a virtual machine.
```