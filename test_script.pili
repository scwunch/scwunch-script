import timeit
settings.base = 'h'
now[]:
    return python ['timeit.default_timer()']
start_time = now  []


function foo
	[int a, str b+; num c = 0, num d, *]:
		if has 'other_name'
			return other_name
		return a, b, c, d
		return str[a] + str[b] + str[c] + str[d]

	bar[int a, str b]:
		return str[a] + b + str[self]

# 	.bar[int a, str b]:
# 		return str[a] + b + str[self]


print foo[a=-1, "one", "two", "three", d=20/30]
print foo[1, "two", c=55, d=1/2]
print foo[a=1, "two", c=55, d=1/2, other_name='YES!']

function multiprint
	repeats = 3
	[any msg]:
		for i in range[repeats]
			print "{i}: {msg}"
		return blank

(repeats: n) = multiprint
if n == multiprint.repeats
    print "`(repeats: int n) = multiprint` set n to same value as multiprint.repeats"
else
    print "FAILURE to set `(repeats: int n) = multiprint`"

multiprint['hello x3']
print multiprint.repeats
multiprint.repeats = 1
print multiprint.repeats
multiprint['hello once']

a = 1
a = (b = 2)
a = b = 3
(a = b) = 4
print 'a: {a}'
print 'b: {b}'

function test
	0: "test initialization success"

print test[0]

greet = "hello world"
test[1] = greet == 'hello world'
print 'test 1 passed' if test[1] == true else 'test 1 FAILED'

greeting[str src]:
    return 'Hello ' + src
test[2] = "Hello Veronica" == greeting['Veronica']
print 'test 2 passed' if test[2] == true else 'test 2 FAILED'

my_var[int num]:
	prop1 = "hello"
	prop2 = "world"
	return num + 5

my_var[str text]:
    return text + '!'
test[3] = my_var[1] == 10
print 'test 3 passed' if test[3] else 'test 3 FAILED'

test[4] = my_var[2] == 11
print 'test 4 passed' if test[4] else 'test 4 FAILED'

function next_var
	[str text]:
	    return text + '?!?!'
test[5] = next_var['hahahahaha'] == 'hahahahaha?!?!'
print 'test 5 passed' if test[5] else 'test 5 FAILED'

my_var[3] = "three"
test[6d] = my_var[3] == 'three'
print 'test 10 passed' if test[6d] else 'test 10 FAILED'

test[7d] = not 345 is type["345"] and 345 is type[3333] and 345 is not str

print 'test 11 passed' if test[7d] else 'test 11 FAILED'

table Dog
	slot name str
	slot breed str
	.bark[]:
	    return "hello my name is " + self.name
	bark_breed[Dog|(breed: str) self]:
		return self.breed
	# .bark: "hello my name is " + self.name
	# I really need to have the dot-option here, because otherwise, methods like str and len will work but
	# new methods will only be defined within the context of Dog!
	# On second thought, I guess it should it be a local in Dog, and locals of Dog should be accessible like rec.name
	# ... but if spot stands in for the namespace, then how can spot.bark actually make spot an argument of bark?
	# ... ... do I need to revive the 'self' keyword?

spot = Dog['Spot', 'terrier']
# return debug spot.bark_breed[]
test[8d] = spot.bark[] == "hello my name is Spot"
print 'test 12 passed' if test[8d] else 'test 12 FAILED'

test[9d] = (spot.breed == "terrier" or spot.name == "Spot") and (spot.breed != "terrier" or spot.name == "Spot") and not (spot.breed == "terrier" and spot.name != "Spot") and not (spot.breed != "terrier" and spot.name == "Spot")
print 'test 13 passed' if test[9d] else 'test 13 FAILED'

spot.name = 'Rover'
test[14] = spot.name == 'Rover'
print 'test 14 passed' if test[14] else 'test 14 FAILED'

test[15] = spot.bark[] == "hello my name is Rover"
print 'test 15 passed' if test[15] else 'test 15 FAILED'

Range[int start, int end, int step]:
	index = start
	function range
		start = start
		end = end
		step = step
		var index = start
		next[]:
			index += step
			return 'done' if index > end else index
	return range
r = Range[0, 3, 1]
# print "Range[0, 3, 1]"
# print r.index
# print r.next[]
# print r.next[]
# print r.next[]
# print r.next[]
# return r.next[]
test[20] = r.index == 0 and r.next[] == 1 and r.next[] == 2 and r.next[] == 3 and r.next[] == 'done'
print 'test 20 passed' if test[20] else 'test 20 FAILED'

# test prototype modification
Dog.bark_breed[Dog self]:
	return "Hi, I'm a " + self.breed
test[21] = (spot.bark_breed) == "Hi, I'm a terrier"
print 'test 21 passed' if test[21] else 'test 21 FAILED'

test[22] = Dog has "asdfknasdf" == false and Dog has "bark_breed" == true
test[22] = test[22] and not has 'asdfasdf' and has "Dog" == true
test[22] = test[22] and has 'str'
print 'test 22 passed' if test[22] else 'test 22 FAILED'

test[23] = (Dog?[23] ?? "fall back") == "fall back" and (spot.?name ?? "no name") == 'Rover'
print 'test 23 passed' if test[23] else 'test 23 FAILED'

foo[str|int]:
    return 'it worked'
test[24] = foo[4] + foo["4"] == 'it worked' * 2
print 'test 24 ' + ('passed' if test[24] else 'FAILED')

foo2[str|int|bool var_name]:
    return str[var_name] + ' worked'
test[25] = foo2[1] == "1 worked"
print 'test 25 ' + ('passed' if test[25] else 'FAILED')

table Cat
	slot name str
	[str name]:
		return Cat.new[name = "ðŸ˜¸ " + name]
	.meow[]:
		return "hello my name is " + self.name
	.str:
	    return "Cat {self.name}"

my_cat = Cat["Ruby"]
# return str[my_cat], my_cat.str
test[30] = str[my_cat] == my_cat.str and my_cat.str == "Cat ðŸ˜¸ Ruby"
print 'test 30 ' + ('passed' if test[30] else 'FAILED')

numberlicious = int|float|bool|ratio  # this is actually basically the same as num
add[numberlicious a, numberlicious b]:
    return int[a] + b
fav_num = 5
test[31] = add[fav_num, 5]  == fav_num.add[5]
print 'test 31 ' + ('passed' if test[31] else 'FAILED')


test[32] = type[-10 / 20].str == "Fraction" \
	        and type[4 * (1 + (-15 / 4))].str == "Integer" \
		    and type[1.0f / 1 + 1].str == "Float"
# print type[-10/20]
# print type[4 * (1 + (-15 / 4))]
# print type[1.0f / 1 + 1]
print 'test 32 ' + ('passed' if test[32] else 'FAILED')

# int_patt = int[-3, 5]
# test[33] = 1 ~ int_patt and -11 !~ int_patt and 0.0 !~ int_patt
# small_str = str[1, 3]
# word_str = str[`\w+`]
# test[33] = test[33] and 'hi' ~ small_str and '' !~ small_str and 'too long' !~ small_str
# test[33] = test[33] and 'hi' ~ word_str and 'two words' !~ word_str
# print 'test 33 ' + ('passed' if test[33] else 'FAILED')
print test[33] = "test 33 deprecated (don't want int[-3, 5] and str[1, 3] patterns builtin anymore)"

neg_int = int < 0
long_str = str >= 5
test[34] = -1 is neg_int and 1 is not neg_int
test[34] = test[34] and 'hi' is not long_str # and 'hello there' ~ long_str
print 'test 34 ' + ('passed' if test[34] else 'FAILED')

test[35] = 0
if 1 == 2
	test[35] = 1
elif 1 == 1
	test[35] = test[35] + 10
else
	test[35] = test[35] + 100

print 'test 35 ' + ('passed' if test[35] == 10 else 'FAILED')


my_list = []
test[40] = 'one'
my_list[1] = 'one'
my_list[2] = 'two'
# my_list['not a number'] = 7d  # error
my_list[3] = 'three'
test[40] = len[my_list] == 3
my_list.push['another value']
test[40] = test[40] and len[my_list] == 4 and my_list[-1] == 'another value'
print 'test 40 ' + ('passed' if test[40] else 'FAILED')

test[41] = my_list.push[55].len == 5 and my_list[1] == 'one' and my_list[-5] == 'one'
print 'test 41 ' + ('passed' if test[41] else 'FAILED')

empty_func = {}
my_func = {'one': 1, 2: 'two', empty_func: 'yeah', (1,2): 'this is not a block'}
my_func = {'one': 1
            2: 'two'
            empty_func: 'yeah'
            (1,2): 'this is not a block'
          }
test[42] = my_func['one'] == 1 and my_func[2] == 'two' and my_func[empty_func] == 'yeah' \
           and my_func[(1,2)] == "this is not a block"
print 'test 42 ' + ('passed' if test[42] else 'FAILED')
stringify = any arg => str[arg]
add_one = [num arg] => str[arg + 1]
add_two = num a, num b => a + b
add_three = (num a, num b; c) => a + b + c
no_sig = a, b => a + b
# print stringify[34/123123]
# print add_one[4]
# print add_two[1,20]
# print add_three[1, 20, c=300]
# print no_sig[-2, -10]
test[123] = (stringify[1] == "1"
			  and add_one[42] == "43"
			  and add_two[1,20] == 21
			  and add_three[1, 20, c=300] == 321
			  and no_sig[-2, -10] == -12)
print 'test 42.5 ' + ('passed' if test[123] else 'FAILED')

count = 0
test[43] = true
for item in my_list
	count = count + 1
	test[43] = test[43] and item == my_list[count]

print 'test 43 ' + ('passed' if test[43] else 'FAILED')

i = 1
while i < 130
	if has 'verbose'
		print i
	i = i + 1
print 'test 44 ' + ('passed' if (test[44] = i == 130) else 'FAILED')

lt[num a, num b]:
    return a < b

function item1
	length = 230

function item2
	length = 143
	.<[other]:
		return length < other.length
	.>[other]:
		return length > other.length

test[45] = item2 < item1 and not item2 > item1
item2.length = 55555
test[45] = test[45] and not item2 < item1 and item2 > item1
print 'test 45 ' + ('passed' if test[45] else 'FAILED')

table Bear
	slot name str
	slot length num
	roar[]:
	    return "Roar!  My name is " + self.name
	. < [Bear other]:
		return self.length < other.length
	. > [Bear other]:
		return self.length > other.length

Fufu = Bear['Fufu', 30]
Boulder = Bear['Boulder', 140]

test[50] = Fufu <= Boulder and Boulder > Fufu
print 'test 50 ' + ('passed' if test[50] else 'FAILED')

==[Bear b1, Bear b2]:
	return b1.name == b2.name

Fufu2 = Bear['no name', 31]
Fufu2.name = 'Fufu'
test[51] = Fufu != Boulder and Fufu == Fufu2
print 'test 51 ' + ('passed' if test[51] else 'FAILED')

test[52] = 'three' in my_list and not 3 in my_list  # and 'Fufu' in Fufu and not 'Boulder' in Fufu
print 'test 52 ' + ('passed' if test[52] else 'FAILED')


join_strings[str items+, num n?]:
	if n
		items = list[items]
		items.push[n.str]
	return items.join[' :: ']

# print join_strings["hi"]
# print join_strings["hi", "there"]
# print join_strings["hi", "there", "someone"]
# print join_strings["hi", "there", 3]
test[53] = join_strings["hi"] == 'hi' and join_strings["hi", "there"] == "hi :: there" and join_strings["hi", "there", "someone"] == "hi :: there :: someone" and join_strings["hi", 1] == "hi :: 1" and join_strings["hi", "there", 3] == "hi :: there :: 3"


# Save items
# Match TraitMatcher(Trait(str),)
# Split -1 1
# Save items
# Bind n blank
# Split 1 2
# Match TraitMatcher(Trait(num),) n


print_test[num n]:
	print  "test {n} { 'passed' if test[n] else ' FAILED' }"

print_test[53]


# Save i
# Jump 2
# Match TraitMatcher(Trait(int),)
# Split -1 1
# Save i
# Bind
# Split 1 2
# Match TraitMatcher(Trait(float),) f None
# Save s
# Match TraitMatcher(Trait(str),)
# Split -1 1
# Save s

ifs[int i*, float f?, str s+]:
	result = ''
	if len[i]
		result = str[i]
	if f != blank
		result = result + ' ' * bool[result] + str[f]
	return result + ' ' * bool[result] + '"' + s.join[' '] + '"'

# print ifs['oh']
# print ifs[1, 'oh']
# print ifs[0.555f, 'oh']
# print ifs[2, 0.0003f, 'oh']
# print ifs[2, 1, 11, 0.4f, 'oh', 'my']
test[54] = ifs['oh'] == '"oh"' and ifs[1, 'oh'] == '(1,) "oh"' and ifs[0.555f, 'oh'] == '0.555 "oh"' and ifs[2, 0.0003f, 'oh'] == '(2,) 0.0003 "oh"' and ifs[2, 1, 11, 0.4f, 'oh', 'my'] == '(2, 1, 11) 0.4 "oh my"'
print_test[54]


asdf = 1
asdf += 2
asdf -= 2 + 2
asdf *= 20
asdf /= -10
asdf += true
asdf //= 2
test[55] = asdf == 1
print_test[55]


function joiner
	[list|tuple ls, str sep]:
	    if len[ls] == 0
	        return ''
		result = ''
		for s in ls[0>>-2]
			result += s.str + sep
		return result + ls[-1].str  # [0, result.len-sep.len]
	[list|tuple ls]:
		return joiner[ls, ' ']

# print my_list.joiner

fsf[float f1*, str s*, float f2*]:
	result = ''
	if f1
		result = "f1: " + f1.joiner
	if s
		result += ', '*bool[result] + "s: " + s.join[' ']
	if f2
		result += ', '*bool[result] + "f2: " + f2.joiner
	return result

# print fsf[-1.3f, 's', -0.122f]
# print fsf['s', -0.122f]
# print fsf[0.2345f]
# print fsf['STRING']
# print fsf['hi', 0.1f, 0.2f]
# print fsf[] or 'fsf[] => ""'
# return '*********************'

test[100] = fsf[-1.3f, 's', -0.122f] == "f1: -1.3, s: s, f2: -0.122" \
            and fsf['s', -0.122f]    == "s: s, f2: -0.122" \
            and fsf[0.2345f]         == "f1: 0.2345" \
            and fsf['STRING']        == "s: STRING" \
            and fsf['h', 0.1f, 0.2f] == "s: h, f2: 0.1 0.2" \
            and fsf[]                == ""
print_test[100]

fsnfi[float f1?, str s*, num n*, float f2*, int op_i+]:
	arguments = []
	if f1
		arguments.push['f1='+f1.str]
	arguments.push['s='+s.str]
	arguments.push['n='+n.str]
	arguments.push['f2='+f2.str]
	if op_i
		arguments.push['op_i='+op_i.str]
	return arguments.joiner

test[122] = fsnfi[0.11f, 'string', 1/2, -3.2f, 1] == "f1=0.11 s=('string',) n=(1/2, -3.2) f2=() op_i=(1,)"
# print fsnfi[0.11f, 'string', 1/2, -3.2f, 1]
# print fsnfi[1.434f, 5]
test[122] &&= fsnfi[1.434, 5] == 's=() n=(515/300,) f2=() op_i=(5,)'
print_test[122]


ls = [1,2,3]
test[101] = ls.join[' :: '] == '1 :: 2 :: 3'
print_test[101]


intize = python['int']
test[102] = intize['36'] == 100 and intize[10.1] == 10
print_test[102]


var_name ??= 5
var_name ??= -10
test[103] ??= var_name == 5
var_name = blank
var_name ??= 'done'
test[103] &&= var_name == 'done'
test[103] ??= 'FAILED'
print_test[103]


cat_names = ['Chairman Meow', 'Purrfect', 'Fuzz Aldrin']
cats = cat_names..Cat
test[104] = cats..name == ['ðŸ˜¸ Chairman Meow', 'ðŸ˜¸ Purrfect', 'ðŸ˜¸ Fuzz Aldrin']
test[104] = test[104] and cats..str.join['\n'] == 'Cat ðŸ˜¸ Chairman Meow\nCat ðŸ˜¸ Purrfect\nCat ðŸ˜¸ Fuzz Aldrin'
threeCats = [Cat, Cat, Cat]
three_ralphs = threeCats..(ct => ct['Ralph'])
# test[104] = test[104] and three_ralphs..meow[].join[''] == 'hello my name is ðŸ˜¸ Ralph' * 3
print_test[104]
# this still needs more work; `three_ralphs..meow[].join['']` doesn't work yet.

iter[@test]:
    return list[range[1, test.len]..(i => (test[i] if i in test else blank))]

```
iterator[seq~str collection, ~blank non_blank_value]:
    for item in collection
        do something
    return

iterator[seq!str collection, !blank non_blank_value]:
    for item in collection
        do something
        "abc".."zed"
    return
```

count = 0
for i in test
	count += 1
	for j in [1,2,3,4,5]
		1
		# print i.str +', ' + j.str
		if count > 1 and j == 4
			break 2
			print "count = " + count.str + "j = " + j.str
	if count >= 14
		break
	count += 5 * (count > 1)
	# print "count = " + count.str

test[105] = j == 4 and count == 2
print_test[105]


count = j = 0
for i in test
	if (count += 1) > 13
		break
	if count < 5
		continue
	for j in [1,2,3,4,5]
		if j > 4.5
			continue
		# print 'j='+j.str
		if j > 2.5
			continue 2
	if j > 2.5 and count >= 5
		print "WILL NOT PRINT THIS LINE"
	# print 'count='+count.str
	if count >= 10
		break
# print 'COUNT='+count.str
# print 'J='+j.str
test[110] = count == 14 and j == 3
print_test[110]


settings.base = 'd'  # pili.settings.set['base', 'd']
99  # no error
test[43] = 19 == 19d and settings.base == 'd'  # pili.settings.get['base'] == 'd'
settings.base = 'h'
test[43] &&= settings.base == 'h'  # pili.settings.get['base'] == 'h'
print_test[111]


test[112] = len[test].str[14] == '46' and num['9.5', 10d] == 13.3
print_test[112]


function some_options
	name = "This is a name"
	5 : "This is a numbered option"
	# [any x]: 'not function option'
# print some_options.len
# print some_options.options
# print some_options[5]
# print some_options.names
# print some_options.keys
# print [len, options, names, keys]..[some_options]..str.join['\n']
# test[113] = [len, options, names, keys]..[some_options]..str.join['\n'] \
# 	== '3\n[[Any x], [ValuePattern(5)], [ValuePattern(named_option) named_option]]\n[named_option, x]\n[5, named_option]' \
# 	or true
# print_test[113]


ls = ['a','b','c','d','e']
test[113] = ls[1 to 3] == ['a', 'b', 'c'] and ls[-3>>0] == ['c', 'd', 'e'] and ls[-2>>0 by -2] == ['d', 'b']
print_test[113]

test[114] = 'pass'
print_test[114]


 d = {		0: 0,
	0: 0,
	1:	'one',
			2: 'two',
	 three = 3
		}

test[115] = d[0] == 0 and d[1] == 'one' and d[2] == 'two' and d.three == 3
print_test[115]


# pili[int n, num m, num b]: n + m + b
# test[121] = pili[1,2,3] == .[1,2,3]
# print_test[121]


test[120] = (1, 2, 3, 4) == (2-1, 4/2, 3, 2**2)
test[120] *= (asdf = 10; asdf += 2; asdf == 12)
print_test[120]

table Fruit
    slot name str
    slot color Color?
    slot weight_in_grams (num>0)?

table Color
    slot name 'red'|'orange'|'yellow'|'green'|'blue'|'purple'
    var red
    var orange
    var yellow
    var green
    var blue
    var purple
    .str:
        return "Color.{self.name}"
Color.red = Color['red']
Color.orange = Color['orange']
Color.yellow = Color['yellow']
Color.green = Color['green']
Color.blue = Color['blue']
Color.purple = Color['purple']


function bind_weight
    [Fruit(weight_in_grams: w, color: Color.red | Color.orange) fruit]:
	    return "Weight of red or orange fruit: {w}"
	[Fruit(weight_in_grams: w, color: Color.purple) fruit]:
	    return "Weight of purple fruit: {w}"


apple = Fruit['apple', Color.red, 200]
grape = Fruit['grape', Color.purple, 23]
# print bind_weight[apple]
# print bind_weight[grape]

test[121] = bind_weight[apple] == "Weight of red or orange fruit: {apple.weight_in_grams}"
test[121] &&= bind_weight[grape] == "Weight of purple fruit: {grape.weight_in_grams}"
print_test[121]

ls = [1, 2, 3, 4, 5, 0]
new_list = [*ls[to 3], '3', *ls[3 to]]
test[124] = new_list == [1, 2, 3, '3', 3, 4, 5, 0]


f = File['../Advent of Code/2023/input_1']
input = f.read[!lines]
test[125] = input.len
print_test[125]

text = 'one2three4five6'
# print regex.extract[`\d`, text]
# print regex[`\d`].extract[text]
# print RegEx[`\d`].extract[text]
test[130] = regex.extract[`\d`, text] == regex[`\d`].extract[text] == RegEx[`\d`].extract[text] == ["2", "4", "6"]
print_test[130]


ls.extend["letters"]
ls.extend[(1,2,3), (4,5,0)]
# print ls.join + ', '.join['', -1, -2, -3]
test[131] = ls.join + ', '.join['', -1, -2, -3] == '123450letters123450, -1, -2, -3'
print_test[131]


table Foo
    slot a int
    slot b str?
    .echo:
        return self.?c ?? self.?b ?? self.a
    .add[Foo other]:
        return Foo[self.a + other.a,
                   (self.b ?? '') + (other.b ?? '')]

foo1 = Foo[11]
foo2 = Foo[22, 'twenny-one']
fools = [foo1, foo2, foo1.add[foo2]]
test[132] = fools..a == [11, 22, 33] and fools..b == [blank, 'twenny-one', 'twenny-one']
test[132] &&= (fools..?c
               == fools..?subtract[foo2]
               == fools..add?['no match']
               == [blank] * 3 )
test[132] &&= and[*fools..?add?[foo2]]
print_test[132]

json_text = `{ "name": "John", "age": 30, "city": "New York"}`
json = parse_json[json_text]
test[133] = json is {'name': str, "age": int}
test[133] &&= json is not {'NAME': str} and json is not {'name': int}
print_test[133]

sample_yaml = ```
---
title: A New Hope # This is a text property
year: 1977
favorite: true
date: 2020-08-21
time: 2020-08-21T10:30:00
cast: # This is a list property
  - Mark Hamill
  - Harrison Ford
  - Carrie Fisher
link: "[[Link]]"
linklist:
  - "[[Link]]"
  - "[[Link2]]"

last: # this will default to blank
---
```
y = yaml[sample_yaml]
test[134] = (y['title'] == 'A New Hope'
             and y['linklist'] == ["[[Link]]", "[[Link2]]"]
             and 'date: 2020-08-21' in yaml.dump[y].split['\n'].set)
print_test[134]

iter[@test]:
    return range[0, test.len-1]
failed_tests = []
for t in test
	if not t in test or not test[t]
		failed_tests.push[t]
if failed_tests.len == 0
	print "All " + str[test.len] + " tests passed!"
else
	print "some tests failed :("
	print failed_tests

end_time = now[]
execution_time = end_time - start_time

start_time = now[]
function long_loop
    [int n]:
        for i in range[n]
            (print i) if i % 1000 == 0 else blank

reps = 100_0000
# long_loop[reps]
# print str[reps, 10d]

end_time = now[]
loop_time = end_time - start_time
print 'MAIN Execution time (hms): {float[round[10000 * execution_time, 4]]}'
print "MAIN Execution time (decimal ms): {str[1000d * execution_time, 10d]}"
print 'LOOP ({reps} iterations) Execution time (hms): {float[round[10000 * loop_time, 4]]}'
print "LOOP ({str[reps, 10d]} iterations) Execution time (decimal ms): " + str[1000d * loop_time, 10d]
return 'TOTAL time: ' + str[1000d * loop_time, 10d] + "ms"
